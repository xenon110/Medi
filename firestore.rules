/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model where users are either 'patient' or 'doctor'.
 * Patients can only manage their own profiles, and doctors can only manage their own profiles.
 * Reports can be created by patients, and are readable and modifiable by both the patient and assigned doctor.
 *
 * Data Structure:
 * - /patients/{patientId}: Stores patient profiles, accessible only by the patient themselves.
 * - /doctors/{doctorId}: Stores doctor profiles, accessible only by the doctor themselves.
 * - /reports/{reportId}: Stores medical reports, accessible to both the patient and the assigned doctor.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles (ownership).
 * - Doctors and patients can read reports.
 * - Write access to reports is limited to the patient who created it and the assigned doctor.
 * - Listing of users (patients or doctors) is disallowed.
 *
 * Denormalization for Authorization:
 * The `Report` entity includes both `patientId` and `doctorId` to simplify access control rules and avoid costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to patient profiles.
     * @path /patients/{patientId}
     * @allow (create) - A user can create their own profile if their auth UID matches the patientId.
     * @allow (get, update, delete) - A user can only access their own patient profile.
     * @deny (create) - A user cannot create a profile with an ID that doesn't match their own.
     * @deny (get, update, delete) - A user cannot access or modify another user's patient profile.
     * @principle Enforces document ownership.
     */
    match /patients/{patientId} {
      allow get: if isOwner(patientId);
      allow list: if false;
      allow create: if isOwner(patientId) && request.auth.uid == patientId;
      allow update: if isExistingOwner(patientId) && request.auth.uid == patientId;
      allow delete: if isExistingOwner(patientId) && request.auth.uid == patientId;
    }

    /**
     * @description Controls access to doctor profiles.
     * @path /doctors/{doctorId}
     * @allow (create) - A user can create their own profile if their auth UID matches the doctorId.
     * @allow (get, update, delete) - A user can only access their own doctor profile.
     * @deny (create) - A user cannot create a profile with an ID that doesn't match their own.
     * @deny (get, update, delete) - A user cannot access or modify another user's doctor profile.
     * @principle Enforces document ownership.
     */
    match /doctors/{doctorId} {
      allow get: if isOwner(doctorId);
      allow list: if false;
      allow create: if isOwner(doctorId) && request.auth.uid == doctorId;
      allow update: if isExistingOwner(doctorId) && request.auth.uid == doctorId;
      allow delete: if isExistingOwner(doctorId) && request.auth.uid == doctorId;
    }

    /**
     * @description Controls access to medical reports.
     * @path /reports/{reportId}
     * @allow (get, list) - Any authenticated user can read any report.
     * @allow (create) - A patient can create a report if their auth UID matches the patientId in the report.
     * @allow (update) - Only the patient who created the report or the assigned doctor can update it.
     * @allow (delete) - Only the patient who created the report or the assigned doctor can delete it.
     * @deny (create) - A user cannot create a report for another patient.
     * @deny (update, delete) - A user cannot modify or delete a report they don't own or aren't the assigned doctor for.
     * @principle Allows patients and doctors to collaborate on reports.
     */
    match /reports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.patientId == request.auth.uid;
      allow update: if isSignedIn() && (resource.data.patientId == request.auth.uid || resource.data.doctorId == request.auth.uid) && resource != null;
      allow delete: if isSignedIn() && (resource.data.patientId == request.auth.uid || resource.data.doctorId == request.auth.uid) && resource != null;
    }

    /**
     * @description Controls access to emergency logs.
     * @path /emergencies/{emergencyId}
     * @allow (create) - Any authenticated user can log an emergency.
     * @allow (get, list, update, delete) - No one can get, list, update, or delete emergencies.
     */
    match /emergencies/{emergencyId} {
      allow get, list, update, delete: if false;
      allow create: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}