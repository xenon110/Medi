/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a role-based access control model,
 *  where users are either patients or doctors.  User profiles are stored
 *  in /patients/{patientId} and /doctors/{doctorId}, respectively.
 *  Reports are stored in /reports/{reportId} and access is controlled based on
 *  the patientId and doctorId within the report. Emergencies are logged in /emergencies/{emergencyId}.
 * @data_structure
 *  - /patients/{patientId}: Stores patient profiles.
 *  - /doctors/{doctorId}: Stores doctor profiles.
 *  - /reports/{reportId}: Stores medical reports.
 *  - /emergencies/{emergencyId}: Logs emergency button clicks.
 * @key_security_decisions
 *  - Patients can only read their own profiles, but Doctors can list all doctors profiles.
 *  - Doctors can create, update, and delete reports where they are the doctorId.
 *  - Patients can create, update, and delete reports where they are the patientId.
 *  - Only signed-in users can log an emergency.
 * @denormalization_for_authorization None needed as the data model contains all required authorization fields in each document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to patient profiles. Patients can only read their own profile.
     * @path /patients/{patientId}
     * @allow (get, list) User with matching ID can read their own profile. e.g., `request.auth.uid == 'patient123'`
     * @deny (get, list) User tries to read another user's profile. e.g., `request.auth.uid == 'doctor456'` trying to read `/patients/patient123`
     * @allow (create) User can create their profile if the ID matches their auth UID. e.g., `request.auth.uid == 'patient123'` creates `/patients/patient123`
     * @deny (create) User attempts to create a profile with a mismatched ID. e.g., `request.auth.uid == 'patient123'` creates `/patients/patient456`
     * @allow (update, delete) User can update/delete their own profile if the ID matches their auth UID. e.g., `request.auth.uid == 'patient123'` updates `/patients/patient123`
     * @deny (update, delete) User attempts to update/delete a profile with a mismatched ID. e.g., `request.auth.uid == 'patient123'` updates `/patients/patient456`
     * @principle Enforces document ownership for all operations.
     */
    match /patients/{patientId} {
      allow get: if isOwner(patientId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(patientId) && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(patientId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isExistingOwner(patientId);
    }

    /**
     * @description Controls access to doctor profiles. Anyone can read the doctor profile.
     * @path /doctors/{doctorId}
     * @allow (get, list) Any user can read any doctor profile.
     * @deny (create, update, delete) Only the owner can modify.
     * @principle Enforces document ownership for writes, public read access.
     */
    match /doctors/{doctorId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(doctorId) && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(doctorId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isExistingOwner(doctorId);
    }

    /**
     * @description Controls access to medical reports.
     * @path /reports/{reportId}
     * @allow (get) Any authenticated user can read any report.
     * @allow (create) Only the patient or doctor specified in the report can create it.
     * @allow (update, delete) Only the patient or doctor specified in the report can update or delete it.
     * @principle Enforces access control based on patientId and doctorId within the report.
     */
    match /reports/{reportId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && (request.resource.data.patientId == request.auth.uid || request.resource.data.doctorId == request.auth.uid);
      allow update: if isSignedIn() && (resource.data.patientId == request.auth.uid || resource.data.doctorId == request.auth.uid);
      allow delete: if isSignedIn() && (resource.data.patientId == request.auth.uid || resource.data.doctorId == request.auth.uid);
    }

    /**
     * @description Controls access to emergency logs.
     * @path /emergencies/{emergencyId}
     * @allow (create) Any signed-in user can log an emergency with their userId.
     * @deny (get, list, update, delete) No one can get, list, update, or delete emergencies.
     * @principle Logs are write-only by authenticated users.
     */
    match /emergencies/{emergencyId} {
      allow get, list: if false;
      allow create: if isSignedIn() && request.resource.data.patientId == request.auth.uid;
      allow update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}