/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @Core Philosophy
 * This ruleset enforces a strict user-ownership model for profiles, ensuring users can only manage their own data.
 * Medical reports are accessible to both the patient and the assigned doctor.
 * Emergency logs are publicly accessible for writing, but only readable by authorized personnel (simulated by checking for a valid auth token).
 *
 * @Data Structure
 * - /patients/{patientId}: Stores patient profiles.
 * - /doctors/{doctorId}: Stores doctor profiles.
 * - /reports/{reportId}: Stores medical reports.
 * - /emergencies/{emergencyId}: Stores emergency button clicks.
 *
 * @Key Security Decisions
 * - Users can only create their own profiles (patients or doctors) using their UID.
 * - Users cannot list all patients or doctors.
 * - Reports can be created by anyone, but the 'patientId' field MUST match the 'request.auth.uid'.
 * - Reports can be updated or deleted only by the doctor or the patient who owns the report, with existence check.
 * - Emergency logs are publicly writable but readable only by authenticated users (e.g., admins or emergency responders).
 *
 * @Denormalization for Authorization
 * - The `reports` documents store both `patientId` and `doctorId` to facilitate access control based on roles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures patient profiles, allowing only the owner to read and write.
     * @path /patients/{patientId}
     * @allow (create) User with uid 'patient123' creates a profile at /patients/patient123.
     * @allow (get) User with uid 'patient123' reads their profile at /patients/patient123.
     * @allow (update) User with uid 'patient123' updates their profile at /patients/patient123.
     * @allow (delete) User with uid 'patient123' deletes their profile at /patients/patient123.
     * @deny (create) User with uid 'doctor456' attempts to create a profile at /patients/patient123.
     * @deny (get) User with uid 'doctor456' attempts to read profile at /patients/patient123.
     * @principle Enforces document ownership for writes.
     */
    match /patients/{patientId} {
      allow get: if isOwner(patientId);
      allow list: if false;
      allow create: if isOwner(patientId) && request.resource.data.uid == patientId;
      allow update: if isExistingOwner(patientId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Secures doctor profiles, allowing only the owner to read and write.
     * @path /doctors/{doctorId}
     * @allow (create) User with uid 'doctor456' creates a profile at /doctors/doctor456.
     * @allow (get) User with uid 'doctor456' reads their profile at /doctors/doctor456.
     * @allow (update) User with uid 'doctor456' updates their profile at /doctors/doctor456.
     * @allow (delete) User with uid 'doctor456' deletes their profile at /doctors/doctor456.
     * @deny (create) User with uid 'patient123' attempts to create a profile at /doctors/doctor456.
     * @deny (get) User with uid 'patient123' attempts to read profile at /doctors/doctor456.
     * @principle Enforces document ownership for writes.
     */
    match /doctors/{doctorId} {
      allow get: if isOwner(doctorId);
      allow list: if false;
      allow create: if isOwner(doctorId) && request.resource.data.uid == doctorId;
      allow update: if isExistingOwner(doctorId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(doctorId);
    }

    /**
     * @description Secures medical reports, allowing the patient and the assigned doctor to read and write.
     * @path /reports/{reportId}
     * @allow (create) User with uid 'patient123' creates a report with patientId 'patient123'.
     * @allow (get) User with uid 'patient123' reads a report with patientId 'patient123'.
     * @allow (get) User with uid 'doctor456' reads a report with doctorId 'doctor456'.
     * @allow (update) User with uid 'doctor456' updates a report with doctorId 'doctor456'.
     * @deny (get) User with uid 'patient789' attempts to read a report with patientId 'patient123'.
     * @deny (delete) User with uid 'patient789' attempts to delete a report with patientId 'patient123'.
     * @principle Allows shared access between patient and doctor based on document fields.
     */
    match /reports/{reportId} {
      allow get: if request.auth.uid == resource.data.patientId || request.auth.uid == resource.data.doctorId;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.patientId == request.auth.uid;
      allow update: if isExistingPatientOrDoctor(resource.data.patientId, resource.data.doctorId);
      allow delete: if isExistingPatientOrDoctor(resource.data.patientId, resource.data.doctorId);
    }

     /**
      * @description Allows anyone to create emergency logs, but restricts reading to authenticated users.
      * @path /emergencies/{emergencyId}
      * @allow (create) Any user (even unauthenticated) can create a new emergency log.
      * @allow (get) Authenticated user can read an emergency log.
      * @deny (get) Unauthenticated user attempts to read an emergency log.
      * @principle Public write, authenticated read.
      */
     match /emergencies/{emergencyId} {
       allow get: if isSignedIn();
       allow list: if isSignedIn();
       allow create: if true;
       allow update: if false;
       allow delete: if false;
     }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }

    function isPatient(patientId) {
      return request.auth.uid == patientId;
    }

    function isDoctor(doctorId) {
      return request.auth.uid == doctorId;
    }

    function isExistingPatientOrDoctor(patientId, doctorId) {
        return isSignedIn() && (isPatient(patientId) || isDoctor(doctorId)) && resource != null;
    }
  }
}