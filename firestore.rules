/**
 * @fileoverview Firestore Security Rules for the medical report application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model, combined with
 * ownership checks to ensure users can only access their own data or data
 * explicitly shared with them. It leverages the `request.auth` object to
 * verify user identity and restrict unauthorized access.
 *
 * Data Structure:
 * - /patients/{patientId}: Stores patient profiles.
 * - /doctors/{doctorId}: Stores doctor profiles.
 * - /reports/{reportId}: Stores medical reports, with `patientId` and `doctorId`
 *   fields linking to the respective user profiles.
 * - /emergencies/{emergencyId}: Stores logs of emergency button clicks.
 *
 * Key Security Decisions:
 * - Patients can read doctor profiles but cannot list all doctors.
 * - Reports enforce ownership for creation (patient owns the report initially) and
 *   shared access for reading and updating (both patient and doctor can access).
 * - Report deletion is disabled.
 * - Doctors cannot list all patients.
 *
 * Denormalization for Authorization:
 * The 'reports' collection relies on denormalization. Each report contains both
 * 'patientId' and 'doctorId' fields. This allows security rules to quickly
 * verify access based on user role and report ownership without requiring
 * additional reads.
 *
 * Structural Segregation:
 * There is no private versus public data, and data is categorized and segregated
 * by collection type and user roles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing resource.
     * @param {string} userId - The user ID to compare against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for doctor profiles.
     * @path /doctors/{doctorId}
     * @allow (get) Authenticated user can read doctor profile.
     * @allow (create, update) Doctor can write/update their own profile.
     * @deny (create, update) Patient cannot write/update a doctor's profile.
     * @deny (delete) No one can delete doctor profiles.
     * @principle Enforces doctor-ownership for profile management.
     */
    match /doctors/{doctorId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(doctorId);
      allow update: if isExistingOwner(doctorId);
      allow delete: if false;
    }

    /**
     * @description Rules for patient profiles.
     * @path /patients/{patientId}
     * @allow (get) Patient can read their own profile.
     * @allow (create, update) Patient can write/update their own profile.
     * @deny (get) Patient cannot read other patient profiles (without a dedicated 'readPatientProfile' role or similar).
     * @deny (create, update) Doctor cannot write/update patient profiles.
     * @deny (delete) No one can delete patient profiles.
     * @principle Enforces patient-ownership for profile management.
     */
    match /patients/{patientId} {
      allow get: if isOwner(patientId);
      allow list: if false;
      allow create: if isOwner(patientId);
      allow update: if isExistingOwner(patientId);
      allow delete: if false;
    }

    /**
     * @description Rules for medical reports.
     * @path /reports/{reportId}
     * @allow (create) Patient can create a report, with `patientId` matching their `uid`.
     * @allow (get) Patient can read their own reports; doctors can read reports assigned to them.
     * @allow (update) Patient can update their own report; doctors can update reports assigned to them.
     * @deny (create) Patient cannot create reports for other patients.
     * @deny (update) Patient cannot update reports not owned by them; doctor cannot update reports not assigned to them.
     * @deny (delete) No one can delete reports.
     * @principle Enforces ownership for creation and shared access for reading/updating based on `patientId` and `doctorId`.
     */
    match /reports/{reportId} {
      allow get: if isSignedIn() && (resource.data.patientId == request.auth.uid || resource.data.doctorId == request.auth.uid);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.patientId == request.auth.uid;
      allow update: if isSignedIn() && (resource.data.patientId == request.auth.uid || resource.data.doctorId == request.auth.uid) && resource != null;
      allow delete: if false;
    }

     /**
      * @description Rules for emergency logs.
      * @path /emergencies/{emergencyId}
      * @allow (create) Any signed-in user can create an emergency log.
      * @deny (get, list, update, delete) No one can read, list, update, or delete emergency logs.
      * @principle Allows creation of emergency logs by authenticated users.
      */
     match /emergencies/{emergencyId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}