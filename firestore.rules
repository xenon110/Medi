/**
 * @fileoverview Firestore Security Rules for the medical application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * ensuring that only authenticated users can read and write their own profile data.
 * Medical reports are accessible to both the patient and the doctor involved,
 * with specific rules governing the report's status and modifications.
 * Emergency logs are write-only, recording events with minimal access restrictions.
 *
 * Data Structure:
 * - /patients/{patientId}: Patient user profiles, accessible only to the owning user.
 * - /doctors/{doctorId}: Doctor user profiles, accessible only to the owning user.
 * - /reports/{reportId}: Medical reports, accessible to the associated patient and doctor.
 * - /emergencies/{emergencyId}: Emergency logs, write-only for any authenticated user.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent information harvesting.
 * - Doctor profile verification status is not directly managed by users through the client; any changes should be performed through trusted backend functions.
 * - The default security posture for ambiguous relationships is to deny access.
 *
 * Denormalization for Authorization:
 * - Reports require `patientId` and `doctorId` fields for access control, denormalized directly onto each report document.
 *
 * Structural Segregation:
 * - Private user data (profiles) is stored in user-specific collections, while public data (reports) resides in a top-level collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure patient profiles, allowing only the owning user to read and write their own profile.
     * @path /patients/{patientId}
     * @allow (create) User with UID 'patient_abc' can create a profile at /patients/patient_abc.
     * @allow (get) User with UID 'patient_abc' can read their profile at /patients/patient_abc.
     * @allow (update) User with UID 'patient_abc' can update their profile at /patients/patient_abc.
     * @allow (delete) User with UID 'patient_abc' can delete their profile at /patients/patient_abc.
     * @deny (create) User with UID 'doctor_xyz' cannot create a profile at /patients/patient_abc.
     * @deny (get) User with UID 'doctor_xyz' cannot read the profile at /patients/patient_abc.
     * @principle Enforces document ownership for writes.
     */
    match /patients/{patientId} {
      allow get: if isOwner(patientId);
      allow list: if false;
      allow create: if isOwner(patientId) && request.resource.data.uid == patientId;
      allow update: if isExistingOwner(patientId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Secure doctor profiles, allowing only the owning user to read and write their own profile.
     * @path /doctors/{doctorId}
     * @allow (create) User with UID 'doctor_xyz' can create a profile at /doctors/doctor_xyz.
     * @allow (get) User with UID 'doctor_xyz' can read their profile at /doctors/doctor_xyz.
     * @allow (update) User with UID 'doctor_xyz' can update their profile at /doctors/doctor_xyz.
     * @allow (delete) User with UID 'doctor_xyz' can delete their profile at /doctors/doctor_xyz.
     * @deny (create) User with UID 'patient_abc' cannot create a profile at /doctors/doctor_xyz.
     * @deny (get) User with UID 'patient_abc' cannot read the profile at /doctors/doctor_xyz.
     * @principle Enforces document ownership for writes.
     */
    match /doctors/{doctorId} {
      allow get: if isOwner(doctorId);
      allow list: if false;
      allow create: if isOwner(doctorId) && request.resource.data.uid == doctorId;
      allow update: if isExistingOwner(doctorId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(doctorId);
    }

    /**
     * @description Secure medical reports, allowing access to the associated patient and doctor.
     * @path /reports/{reportId}
     * @allow (get) User with UID 'patient_abc' can read a report where patientId == 'patient_abc'.
     * @allow (get) User with UID 'doctor_xyz' can read a report where doctorId == 'doctor_xyz'.
     * @deny (get) User with UID 'hacker_123' cannot read a report where they are not the patient or doctor.
     * @principle Grants access based on user role and report association.
     */
    match /reports/{reportId} {
      allow get: if isPatientOrDoctor(resource.data.patientId, resource.data.doctorId);
      allow list: if false; // Listing reports is disallowed for now.

      // Both patient and doctor should be able to create reports
      // The report needs to contain both the patientId and the doctorId
      allow create: if isSignedIn() && request.resource.data.keys().hasAll(['patientId', 'doctorId']);

      // Only doctor can update or delete reports. Both doctorId must match the report's doctorId
      allow update: if isSignedIn() && isDoctor(resource.data.doctorId);
      allow delete: if isSignedIn() && isDoctor(resource.data.doctorId);
    }

     /**
      * @description Logs emergency button clicks with minimal access restrictions.
      * @path /emergencies/{emergencyId}
      * @allow (create) Any authenticated user can log an emergency.
      */
     match /emergencies/{emergencyId} {
        allow get: if false;
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
     }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  function isPatientOrDoctor(patientId, doctorId) {
      return request.auth.uid == patientId || request.auth.uid == doctorId;
  }

  function isDoctor(doctorId) {
      return request.auth.uid == doctorId;
  }
}