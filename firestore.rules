/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model where users are either 'patient' or 'doctor'.
 * Patients can only access their own profiles and reports, while doctors can access their profiles and review reports associated with them.
 *
 * Data Structure:
 * - User profiles are stored in `/patients/{patientId}` and `/doctors/{doctorId}`. The document ID is the user's UID.
 * - Medical reports are stored in the top-level `/reports/{reportId}` collection and contain `patientId` and `doctorId` fields.
 * - Emergency logs are stored in the top-level `/emergencies/{emergencyId}` collection and contain a `patientId` field.
 *
 * Key Security Decisions:
 * - Users can only create their own profile (self-registration).
 * - Listing of all users (patients or doctors) is disallowed.
 * - Reports are readable by both the patient and the assigned doctor.
 *
 * Denormalization for Authorization:
 * - Reports denormalize `patientId` and `doctorId` to simplify authorization checks.
 *
 * Structural Segregation:
 * - Patient and doctor profiles are stored in separate collections to streamline role-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own patient profile.
     * @path /patients/{patientId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) Authenticated user with matching UID can read/update/delete their profile.
     * @deny (create) User attempts to create a profile with a mismatched UID.
     * @deny (list) Any user attempts to list all patient profiles.
     * @principle Enforces user-ownership for patient profiles.
     */
    match /patients/{patientId} {
      // Anyone can create their own profile.
      allow create: if isSignedIn() && request.auth.uid == patientId;
      allow get, update, delete: if isOwner(patientId);
      allow list: if false;
    }

    /**
     * @description Allows a user to read and write their own doctor profile.
     * @path /doctors/{doctorId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) Authenticated user with matching UID can read/update/delete their profile.
     * @deny (create) User attempts to create a profile with a mismatched UID.
     * @deny (list) Any user attempts to list all doctor profiles.
     * @principle Enforces user-ownership for doctor profiles.
     */
    match /doctors/{doctorId} {
      allow create: if isSignedIn() && request.auth.uid == doctorId;
      allow get, update, delete: if isOwner(doctorId);
      allow list: if false;
    }

    /**
     * @description Allows patients and doctors to read reports associated with them, and doctors to update reports.
     * @path /reports/{reportId}
     * @allow (get) Authenticated user can read a report if they are the patient or the doctor.
     * @allow (list) No one can list all reports.
     * @allow (create) Authenticated user can create a report, validating patientId.
     * @allow (update) Authenticated doctor can update a report where they are the assigned doctor and the report exists.
     * @allow (delete) No one can delete a report.
     * @deny (create) User attempts to create a report with a mismatched patientId.
     * @deny (update) User attempts to update a report they are not authorized to modify.
     * @principle Enforces role-based access control for reports.
     */
    match /reports/{reportId} {
      allow get: if isSignedIn() && (isPatientOfReport(resource.data.patientId) || isDoctorOfReport(resource.data.doctorId));
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.patientId is string;
      allow update: if isSignedIn() && isDoctorOfReport(resource.data.doctorId) && existsAfterUpdate(reportId);
      allow delete: if false;
    }

    /**
     * @description Logs emergency button clicks by patients.
     * @path /emergencies/{emergencyId}
     * @allow (create) Authenticated user can create an emergency log, validating patientId.
     * @deny (get, list, update, delete) No one can get, list, update, or delete emergency logs.
     * @principle Only allows creating emergency logs; all other operations are forbidden.
     */
    match /emergencies/{emergencyId} {
      allow create: if isSignedIn() && isPatient(request.resource.data.patientId);
      allow get, list, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isPatientOfReport(patientId) {
        return isSignedIn() && request.auth.uid == patientId;
    }

    function isDoctorOfReport(doctorId) {
        return isSignedIn() && request.auth.uid == doctorId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
     function isExistingDoctorOfReport(doctorId) {
      return isSignedIn() && request.auth.uid == resource.data.doctorId;
    }

    function isPatient(patientId) {
      return isSignedIn() && request.auth.uid == patientId;
    }

    function existsAfterUpdate(reportId) {
        return getAfter(/databases/$(database)/documents/reports/$(reportId)).data != null;
    }

        // Helper function to check if a document exists after an update
    function getAfter(path) {
        return get(path);
    }
  }
}