/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system with ownership constraints.
 *
 * Data Structure:
 * - User profiles are stored in `/patients/{patientId}` and `/doctors/{doctorId}`.
 * - Medical reports are stored in `/reports/{reportId}`.
 * - Emergency logs are stored in `/emergencies/{emergencyId}`.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Reports can be created by anyone, but only updated/deleted by the associated doctor or the patient who created the report.
 * - Listing of user profiles is disallowed to prevent information disclosure.
 *
 * Denormalization for Authorization:
 * - Reports contain `patientId` and `doctorId` to simplify authorization checks without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for patient profiles.
     * @path /patients/{patientId}
     * @allow (read) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile if the ID matches their auth UID.
     * @deny (read) Authenticated user cannot read other user profiles.
     * @deny (update) Authenticated user cannot update other user profiles.
     * @deny (delete) No one can delete a user profile.
     * @principle Enforces document ownership for reads and self-creation.
     */
    match /patients/{patientId} {
      // Allow a user to read their own profile
      allow get: if isSignedIn() && isOwner(patientId);
      // Allow a user to list profiles - DENIED
      allow list: if false;
      // Allow a user to create their profile, but only if the ID matches their auth UID
      allow create: if isSignedIn() && isOwner(patientId);
      // Allow a user to update their own profile
      allow update: if isSignedIn() && isOwner(patientId);
      // No one can delete a user profile
      allow delete: if false;
    }

    /**
     * @description Enforces access control for doctor profiles.
     * @path /doctors/{doctorId}
     * @allow (read) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile if the ID matches their auth UID.
     * @deny (read) Authenticated user cannot read other user profiles.
     * @deny (update) Authenticated user cannot update other user profiles.
     * @deny (delete) No one can delete a user profile.
     * @principle Enforces document ownership for reads and self-creation.
     */
    match /doctors/{doctorId} {
      // Allow a user to read their own profile
      allow get: if isSignedIn() && isOwner(doctorId);
      // Allow a user to list profiles - DENIED
      allow list: if false;
      // Allow a user to create their profile, but only if the ID matches their auth UID
      allow create: if isSignedIn() && isOwner(doctorId);
      // Allow a user to update their own profile
      allow update: if isSignedIn() && isOwner(doctorId);
      // No one can delete a user profile
      allow delete: if false;
    }

    /**
     * @description Enforces access control for medical reports.
     * @path /reports/{reportId}
     * @allow (read) Authenticated user can read any report.
     * @allow (create) Authenticated user can create a new report.
     * @deny (update) Only the associated doctor or the patient can update the report.
     * @deny (delete) Only the associated doctor or the patient can delete the report.
     * @principle Allows public read access but restricts write access to owners.
     */
    match /reports/{reportId} {
      // Anyone can read a report
      allow get: if true;
      // Anyone can list all reports
      allow list: if true;
      // Allow create if the report has patientId set correctly
      allow create: if isSignedIn();
      // Allow update if the user is the patient or the doctor associated with the report
      allow update: if isSignedIn() && (isPatientOnReport(resource.data.patientId) || isDoctorOnReport(resource.data.doctorId));
      // Allow delete if the user is the patient or the doctor associated with the report and the document exists
      allow delete: if isSignedIn() && (isPatientOnReport(resource.data.patientId) || isDoctorOnReport(resource.data.doctorId)) && resource != null;
    }
    
    /**
     * @description Enforces access control for emergency logs.
     * @path /emergencies/{emergencyId}
     * @allow (create) Any signed in user can create an emergency log.
     * @deny (get) No one can get a specific log.
     * @deny (list) No one can list logs.
     * @deny (update) No one can update a log.
     * @deny (delete) No one can delete a log.
     */
        match /emergencies/{emergencyId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
    
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document based on the uid
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the patient associated with the report
  function isPatientOnReport(patientId) {
    return request.auth.uid == patientId;
  }

  // Helper function to determine if the user is the doctor associated with the report
  function isDoctorOnReport(doctorId) {
    return request.auth.uid == doctorId;
  }
}