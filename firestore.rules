rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages doctor profiles, ensuring doctors can only create their own profile,
     *              and patients can only access approved doctors.
     * @path /doctors/{doctorId}
     * @allow (create) Authenticated doctor creates their own profile.
     * @deny (create) Authenticated user attempts to create a doctor profile with a mismatched ID.
     * @allow (get) Doctor can read his own approved profile.
     * @allow (get) Patient can read an approved doctor profile.
     * @deny (get) Patient can read a non-approved doctor profile.
     * @allow (update) Doctor can update his own profile.
     * @deny (update) Doctor attempts to update another doctor's profile.
     * @allow (delete) Doctor can delete his own profile.
     * @deny (delete) Doctor attempts to delete another doctor's profile.
     * @deny (list) No one can list doctors.
     * @principle Enforces document ownership for writes and restricts listing for privacy.
     */
    match /doctors/{doctorId} {
      allow create: if isSignedIn() && request.auth.uid == doctorId;
      allow get: if isSignedIn() && (request.auth.uid == doctorId || (resource.data.verificationStatus == 'approved'));
      allow update: if isSignedIn() && request.auth.uid == doctorId;
      allow delete: if isSignedIn() && request.auth.uid == doctorId;
      allow list: if false;
    }

    /**
     * @description Manages medical reports, ensuring patients can only create reports for themselves and approved doctors,
     *              and doctors can update reports assigned to them.
     * @path /reports/{reportId}
     * @allow (create) Patient creates a report for themselves and an approved doctor.
     * @deny (create) Patient attempts to create a report for another patient or a non-approved doctor.
     * @allow (get) Patient or Doctor can read a report related to him.
     * @deny (get) User attempts to read a report not related to them.
     * @allow (update) Doctor can update a report assigned to them.
     * @deny (update) Doctor attempts to update a report not assigned to them.
     * @deny (delete) No one can delete reports.
     * @deny (list) No one can list reports.
     * @principle Enforces document ownership and role-based access for report management.
     */
    match /reports/{reportId} {
      allow create: if isSignedIn()
                     && request.resource.data.patientId == request.auth.uid
                     && exists(/databases/$(database)/documents/doctors/$(request.resource.data.doctorId));

      allow get: if isSignedIn() &&
                   (request.auth.uid == resource.data.patientId ||
                    request.auth.uid == resource.data.doctorId);

      allow list: if false;

      allow update: if isSignedIn() && request.auth.uid == resource.data.doctorId;

      allow delete: if false;
    }
    
    /**
     * @description Logs emergency button clicks. Only authenticated users can create a log. Listing, getting, updating, or deleting logs is disallowed.
     * @path /emergencies/{emergencyId}
     * @allow (create) Authenticated user creates an emergency log.
     * @deny (create) Unauthenticated user attempts to create an emergency log.
     * @deny (get) No one can get emergency logs.
     * @deny (list) No one can list emergency logs.
     * @deny (update) No one can update emergency logs.
     * @deny (delete) No one can delete emergency logs.
     * @principle Restricts emergency log access to creation by authenticated users only.
     */
    match /emergencies/{emergencyId} {
      allow create: if isSignedIn();
      allow get: if false;
      allow list: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }
  
  function isExistingOwner(userId) {
    return isSignedIn() && request.auth.uid == userId && resource != null;
  }

  function isPatientOfReport(patientId) {
    return isSignedIn() && request.auth.uid == patientId && resource.data.patientId == request.auth.uid;
  }

  function isDoctorOfReport(doctorId) {
    return isSignedIn() && resource.data.doctorId == request.auth.uid;
  }
}