/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a role-based access control model,
 *  where users are either patients or doctors. Doctors have read access to reports.
 *  Users can only create their own profile.
 * @data_structure
 *  - /patients/{patientId}: Stores patient profiles.
 *  - /doctors/{doctorId}: Stores doctor profiles.
 *  - /reports/{reportId}: Stores medical reports.
 *  - /emergencies/{emergencyId}: Logs emergency button clicks.
 * @key_security_decisions
 *  - Doctors can read reports, but only owners can modify them.
 *  - Users can only create their own profile document.
 *  - Listing of users is disallowed to prevent information disclosure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Root-level check to ensure the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Check if the user is an existing owner of the document.
     * @details Combines ownership check with existence check for update/delete.
     */
    function isExistingOwner(userId) {
      return (isOwner(userId) && resource != null);
    }

    /**
     * @description Helper function to check if the user has the doctor role.
     */
    function isDoctor() {
        return get(/databases/$(database)/documents/doctors/$(request.auth.uid)).data.role == 'doctor';
    }

    /**
     * @description Patient profile access rules.
     * @path /patients/{patientId}
     * @allow (create) - User with matching UID can create their profile.
     * @allow (get, update, delete) - User with matching UID can access/modify their profile.
     * @deny (create) - User tries to create a profile with a different UID.
     * @deny (update, delete) - User tries to modify/delete someone else's profile.
     * @principle Enforces document ownership for patient profiles.
     */
    match /patients/{patientId} {
      allow get: if isOwner(patientId);
      allow list: if false;
      allow create: if isOwner(patientId) && request.resource.data.uid == patientId;
      allow update: if isExistingOwner(patientId) && request.resource.data.uid == patientId;
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Doctor profile access rules.
     * @path /doctors/{doctorId}
     * @allow (create) - User with matching UID can create their profile.
     * @allow (get, update, delete) - User with matching UID can access/modify their profile.
     * @deny (create) - User tries to create a profile with a different UID.
     * @deny (update, delete) - User tries to modify/delete someone else's profile.
     * @principle Enforces document ownership for doctor profiles.
     */
    match /doctors/{doctorId} {
      allow get: if isOwner(doctorId);
      allow list: if false;
      allow create: if isOwner(doctorId) && request.resource.data.uid == doctorId;
      allow update: if isExistingOwner(doctorId) && request.resource.data.uid == doctorId;
      allow delete: if isExistingOwner(doctorId);
    }

    /**
     * @description Medical report access rules.
     * @path /reports/{reportId}
     * @allow (get, list) - Doctors can read all reports.
     * @allow (create) - Only the report creator can create reports (implicitly through the patient).  The doctor ID must also be valid.
     * @allow (update, delete) - Only the owner (creator) can modify or delete a report.
     * @deny (create) - User attempts to create a report for another user.
     * @deny (update, delete) - User attempts to modify or delete a report they don't own.
     * @principle Public read, owner-only write for reports.
     */
    match /reports/{reportId} {
        allow get: if isDoctor();
        allow list: if isDoctor();
        allow create: if isSignedIn() && request.resource.data.doctorId != null;
        allow update: if isExistingOwner(resource.data.doctorId);
        allow delete: if isExistingOwner(resource.data.doctorId);
    }
    
    /**
     * @description Emergency log access rules.
     * @path /emergencies/{emergencyId}
     * @allow (create) - Any signed-in user can create an emergency log.
     * @deny (get, list, update, delete) - No one can read, list, update, or delete emergency logs.
     * @principle Only allow logging of emergencies, no other access.
     */
    match /emergencies/{emergencyId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}