/**
 * @file Firebase Security Rules for the medical application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for profiles and a shared-access model for reports,
 * ensuring that users can only manage their own profiles while doctors and patients can access relevant reports.
 *
 * Data Structure:
 * - User profiles are stored in /patients/{patientId} and /doctors/{doctorId}.
 * - Medical reports are stored in /reports/{reportId}, with access controlled based on patientId and doctorId.
 * - Emergency logs are stored in /emergencies/{emergencyId}
 *
 * Key Security Decisions:
 * - Users (patients and doctors) can create their own profiles with matching UIDs.
 * - Users cannot list other users' profiles.
 * - Report access is restricted to the associated patient and doctor.
 * - Emergency logs can only be created.
 *
 * Denormalization for Authorization:
 * - Reports are designed to include both `patientId` and `doctorId` to enable direct rule-based authorization without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to patient profiles.
     * @path /patients/{patientId}
     * @allow (create) - User with matching UID can create their profile.
     * @allow (get) - User with matching UID can get their profile.
     * @allow (update) - User with matching UID can update their profile.
     * @allow (delete) - User with matching UID can delete their profile.
     * @deny (list) - Listing all patients is not allowed.
     * @principle Enforces document ownership for profiles.
     */
    match /patients/{patientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(patientId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(patientId) && request.resource.data.uid == patientId;
      allow update: if isExistingOwner(patientId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Controls access to doctor profiles.
     * @path /doctors/{doctorId}
     * @allow (create) - User with matching UID can create their profile.
     * @allow (get) - User with matching UID can get their profile.
     * @allow (update) - User with matching UID can update their profile.
     * @allow (delete) - User with matching UID can delete their profile.
     * @deny (list) - Listing all doctors is not allowed.
     * @principle Enforces document ownership for profiles.
     */
    match /doctors/{doctorId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(doctorId) {
        return request.auth.uid == doctorId;
      }

      function isExistingOwner(doctorId) {
        return isOwner(doctorId) && resource != null;
      }

      allow get: if isOwner(doctorId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(doctorId) && request.resource.data.uid == doctorId;
      allow update: if isExistingOwner(doctorId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(doctorId);
    }

    /**
     * @description Controls access to medical reports.
     * @path /reports/{reportId}
     * @allow (get) - Patient or Doctor with matching ID can read the report.
     * @allow (list) - No listing of reports allowed.
     * @allow (create) - Doctor or Patient with matching ID can create the report.
     * @allow (update) - Doctor or Patient with matching ID can update the report.
     * @allow (delete) - Doctor or Patient with matching ID can delete the report.
     * @deny (unauthorized access) - Other users cannot access the report.
     * @principle Enforces shared access based on patientId and doctorId.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isPatientOrDoctor(patientId, doctorId) {
        return request.auth.uid == patientId || request.auth.uid == doctorId;
      }
      function isExistingPatientOrDoctor(patientId, doctorId) {
        return isPatientOrDoctor(patientId, doctorId) && resource != null;
      }

      allow get: if isSignedIn() && isPatientOrDoctor(resource.data.patientId, resource.data.doctorId);
      allow list: if false;
      allow create: if isSignedIn() && (request.resource.data.patientId == request.auth.uid || request.resource.data.doctorId == request.auth.uid);
      allow update: if isExistingPatientOrDoctor(resource.data.patientId, resource.data.doctorId);
      allow delete: if isExistingPatientOrDoctor(resource.data.patientId, resource.data.doctorId);
    }

    /**
     * @description Controls access to emergency logs.
     * @path /emergencies/{emergencyId}
     * @allow (create) - Any signed-in user can create an emergency log.
     * @deny (get, list, update, delete) - No other operations are allowed.
     */
    match /emergencies/{emergencyId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get: if false;
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }
  }
}