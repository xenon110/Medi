/**
 * @fileoverview Firestore Security Rules for the medical application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and
 * explicit ownership. It allows authenticated users to read doctor profiles,
 * while maintaining strict control over patient data, reports, and
 * emergency records. Data shape is not strictly enforced to allow for rapid prototyping,
 * but authorization checks are in place.
 *
 * Data Structure:
 * - /patients/{patientId}: Patient profiles, only accessible to the
 *   corresponding patient.
 * - /doctors/{doctorId}: Doctor profiles, publicly readable by authenticated
 *   users, but write-protected.
 * - /reports/{reportId}: Medical reports, accessible to the associated
 *   patient and doctor.
 * - /emergencies/{emergencyId}: Emergency records, write-protected.
 *
 * Key Security Decisions:
 * - Doctor profiles are publicly readable to enable the "Consult a Doctor"
 *   feature.
 * - Patient profiles and reports are strictly access-controlled based on
 *   ownership.
 * - User listing is disallowed.
 *
 * Denormalization for Authorization:
 * - The rules rely on `patientId` and `doctorId` fields within the
 *   `/reports/{reportId}` documents to enforce access control, avoiding
 *   costly `get()` calls.
 *
 * Structural Segregation:
 * - Private patient data and public doctor data are stored in separate top-level
 *   collections to simplify access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any authenticated user to read doctor profiles.
     * @path /doctors/{doctorId}
     * @allow (get, list) User is authenticated.
     * @deny (create, update, delete) All write operations are disallowed.
     * @principle Allows public read access for doctor profiles.
     */
    match /doctors/{doctorId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to patient profiles, enforcing ownership.
     * @path /patients/{patientId}
     * @allow (get, list) User must be the owner of the patient profile.
     * @allow (create) User must be the owner of the patient profile and the ID must match the auth UID.
     * @allow (update, delete) User must be the existing owner of the patient profile.
     * @deny All requests that do not meet the above criteria.
     * @principle Enforces document ownership for both reads and writes.
     */
    match /patients/{patientId} {
      allow get: if isOwner(patientId);
      allow list: if isOwner(patientId);
      allow create: if isOwner(patientId) && request.resource.data.uid == patientId;
      allow update: if isExistingOwner(patientId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Controls access to medical reports, allowing access to the patient and doctor involved.
     * @path /reports/{reportId}
     * @allow (get, list) User must be the patient or the doctor associated with the report.
     * @allow (create) User must be authenticated.
     * @allow (update, delete) User must be the existing patient or doctor associated with the report.
     * @deny All requests that do not meet the above criteria.
     * @principle Enforces shared access based on document fields.
     */
    match /reports/{reportId} {
      allow get: if isPatientOrDoctor(resource.data.patientId, resource.data.doctorId);
      allow list: if isPatientOrDoctor(resource.data.patientId, resource.data.doctorId);
      allow create: if isSignedIn();
      allow update: if isExistingPatientOrDoctor(resource.data.patientId, resource.data.doctorId);
      allow delete: if isExistingPatientOrDoctor(resource.data.patientId, resource.data.doctorId);
    }
    
    /**
     * @description Controls access to emergency records, only allowing creation.
     * @path /emergencies/{emergencyId}
     * @allow (create) User must be authenticated.
     * @deny (get, list, update, delete) All other operations are disallowed.
     * @principle Restricts access to emergency records.
     */
    match /emergencies/{emergencyId} {
      allow create: if isSignedIn();
      allow get, list, update, delete: if false;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the document.
     * @param {string} userId - The user ID to check against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is either the patient or the doctor associated with the report.
     * @param {string} patientId - The patient ID to check against.
     * @param {string} doctorId - The doctor ID to check against.
     * @return {bool} True if the user is the patient or the doctor, false otherwise.
     */
    function isPatientOrDoctor(patientId, doctorId) {
      return request.auth.uid == patientId || request.auth.uid == doctorId;
    }

   /**
     * @description Checks if the user is either the existing patient or the existing doctor associated with the report.
     * @param {string} patientId - The patient ID to check against.
     * @param {string} doctorId - The doctor ID to check against.
     * @return {bool} True if the user is the patient or the doctor and the resource exists, false otherwise.
     */
    function isExistingPatientOrDoctor(patientId, doctorId) {
      return isPatientOrDoctor(patientId, doctorId) && resource != null;
    }
  }
}