/**
 * @fileoverview Firestore Security Rules for the medical AI application.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for profiles, ensuring that users can only access and modify their own profile data.
 * Reports are accessible to both the patient and the doctor involved, with specific status-based restrictions for modification.
 * Doctor profiles have an additional 'verificationStatus' which affects whether a doctor profile can be accessed or not.
 *
 * Data Structure:
 * - /patients/{patientId}: Stores patient profiles, with 'patientId' matching the user's UID.
 * - /doctors/{doctorId}: Stores doctor profiles, with 'doctorId' matching the user's UID.
 * - /reports/{reportId}: Stores medical reports, with access controlled by 'patientId' and 'doctorId' fields within the document.
 * - /emergencies/{emergencyId}: Logs emergency events, with access restricted to authorized users.
 *
 * Key Security Decisions:
 * - User listing is disallowed for both patients and doctors to prevent enumeration.
 * - Reports are designed for shared access between patients and doctors, not public access.
 *
 * Denormalization for Authorization:
 * The 'Report' entity relies on the 'patientId' and 'doctorId' fields to determine access. These are denormalized directly onto the report document to avoid costly `get()` operations in the rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages patient user profiles.
     * @path /patients/{patientId}
     * @allow (create) - A user can create their own profile if the patientId matches their UID.
     * @allow (get) - A user can read their own profile if the patientId matches their UID.
     * @allow (update) - A user can update their own profile if the patientId matches their UID and the document exists.
     * @allow (delete) - A user can delete their own profile if the patientId matches their UID and the document exists.
     * @deny (list) - Listing all patients is not allowed.
     * @deny (create) - A user cannot create a patient profile with a mismatched ID.
     * @deny (update) - A user cannot update another user's profile.
     * @deny (delete) - A user cannot delete another user's profile.
     * @principle Enforces document ownership for writes, restricting access to a user's own data tree.
     */
    match /patients/{patientId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(patientId);
      allow list: if false;
      allow create: if isOwner(patientId) && request.resource.data.uid == patientId;
      allow update: if isExistingOwner(patientId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Manages doctor user profiles.
     * @path /doctors/{doctorId}
     * @allow (create) - A user can create their own profile if the doctorId matches their UID.
     * @allow (get) - A user can read their own profile if the doctorId matches their UID.
     * @allow (update) - A user can update their own profile if the doctorId matches their UID and the document exists.
     * @allow (delete) - A user can delete their own profile if the doctorId matches their UID and the document exists.
     * @deny (list) - Listing all doctors is not allowed.
     * @deny (create) - A user cannot create a doctor profile with a mismatched ID.
     * @deny (update) - A user cannot update another user's profile.
     * @deny (delete) - A user cannot delete another user's profile.
     * @principle Enforces document ownership for writes, restricting access to a user's own data tree.
     */
    match /doctors/{doctorId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(doctorId);
      allow list: if false;
      allow create: if isOwner(doctorId) && request.resource.data.uid == doctorId;
      allow update: if isExistingOwner(doctorId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(doctorId);
    }

    /**
     * @description Manages medical reports.
     * @path /reports/{reportId}
     * @allow (get) - A patient or doctor can read a report if their ID is listed in the report.
     * @allow (list) - Listing reports is not allowed.
     * @allow (create) - A user can create a report if they are a patient and their ID matches the patientId field.
     * @allow (update) - Only the assigned doctor can update a report, and only if the status is "pending-doctor-review" or "doctor-modified".
     * @allow (delete) - No one can delete a report.
     * @deny (create) - A user cannot create a report for another patient.
     * @deny (update) - A patient cannot modify their own report. Only a doctor can.
     * @deny (update) - Doctors cannot modify reports that are not in a "pending-doctor-review" or "doctor-modified" state.
     * @principle Shared access between patient and doctor.
     */
    match /reports/{reportId} {
      function isPatientOrDoctor(patientId, doctorId) {
        return request.auth.uid == patientId || request.auth.uid == doctorId;
      }
      function isDoctorAssigned(doctorId) {
        return request.auth.uid == doctorId;
      }
      function isValidStatusForDoctorUpdate(status) {
        return status == "pending-doctor-review" || status == "doctor-modified";
      }
      allow get: if isPatientOrDoctor(resource.data.patientId, resource.data.doctorId);
      allow list: if false;
      allow create: if request.auth.uid == request.resource.data.patientId;
      allow update: if resource != null && isDoctorAssigned(resource.data.doctorId) && isValidStatusForDoctorUpdate(resource.data.status);
      allow delete: if false;
    }
      /**
       * @description Logs emergency button clicks.
       * @path /emergencies/{emergencyId}
       * @allow (create) - Any authenticated user can log an emergency.
       * @allow (get) - No one can get a specific emergency log
       * @allow (list) - No one can list emergency logs.
       * @allow (update) - No one can update an emergency log.
       * @allow (delete) - No one can delete an emergency log.
       * @principle Only authenticated users can create logs
       */
      match /emergencies/{emergencyId} {
        allow create: if isSignedIn();
        allow get: if false;
        allow list: if false;
        allow update: if false;
        allow delete: if false;
      }
  }
  function isSignedIn() {
    return request.auth != null;
  }
}