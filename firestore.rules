/**
 * @fileoverview Firestore Security Rules for the medical report application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model, where users are either 'patient' or 'doctor'.
 * Patients can only access their own profiles and create reports for themselves.
 * Doctors can only access their own profiles and review/modify reports assigned to them.
 * General listing of users is disallowed.
 *
 * Data Structure:
 * - /patients/{patientId}: Stores patient profiles, accessible only to the patient themselves.
 * - /doctors/{doctorId}: Stores doctor profiles, accessible only to the doctor themselves.
 * - /reports/{reportId}: Stores medical reports. Access is controlled based on the report's `patientId` and `doctorId` fields.
 * - /emergencies/{emergencyId}: Stores logs of emergency button clicks. Accessible to write for signed-in users.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent unauthorized data access.
 * - Role-based access control is enforced for report access, ensuring patients and doctors can only access relevant reports.
 *
 * Denormalization for Authorization:
 * - The `Report` entity includes both `patientId` and `doctorId` to enable efficient security rules without requiring additional reads.
 *   This allows rules to quickly verify if the requesting user is the patient or the assigned doctor for a given report.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Stores patient user profiles.
     * @path /patients/{patientId}
     * @allow (get) User with matching UID can read their profile.
     * @allow (create) User with matching UID can create their profile.
     * @allow (update) User with matching UID can update their profile.
     * @deny (get) User with mismatched UID cannot read another user's profile.
     * @deny (create) User with mismatched UID cannot create a profile for another user.
     * @deny (update) User with mismatched UID cannot update another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /patients/{patientId} {
      allow get: if isOwner(patientId);
      allow list: if false;
      allow create: if isOwner(patientId) && request.resource.data.uid == patientId;
      allow update: if isExistingOwner(patientId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Stores doctor user profiles.
     * @path /doctors/{doctorId}
     * @allow (get) Doctor with matching UID can read their profile.
     * @allow (create) Doctor with matching UID can create their profile.
     * @allow (update) Doctor with matching UID can update their profile.
     * @deny (get) User with mismatched UID cannot read another user's profile.
     * @deny (create) User with mismatched UID cannot create a profile for another user.
     * @deny (update) User with mismatched UID cannot update another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /doctors/{doctorId} {
      allow get: if isOwner(doctorId);
      allow list: if false;
      allow create: if isOwner(doctorId) && request.resource.data.uid == doctorId;
      allow update: if isExistingOwner(doctorId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(doctorId);
    }

    /**
     * @description Stores medical reports.
     * @path /reports/{reportId}
     * @allow (get) Patient or doctor with matching ID in the report can read the report.
     * @allow (create) Patient can create a report with their patientId.
     * @allow (update) Doctor with matching ID in the report can update the report.
     * @deny (get) User with mismatched ID in the report cannot read the report.
     * @deny (create) User with mismatched ID in the report cannot create a report for another patient.
     * @deny (update) Patient cannot update the report once created.
     * @principle Enforces document ownership and role-based access for reports.
     */
    match /reports/{reportId} {
      allow get: if (isSignedIn() && (resource.data.patientId == request.auth.uid || resource.data.doctorId == request.auth.uid));
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.patientId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.doctorId == request.auth.uid && resource != null;
      allow delete: if false;
    }

     /**
     * @description Logs emergency button clicks.
     * @path /emergencies/{emergencyId}
     * @allow (create) Any signed-in user can log an emergency.
     */
    match /emergencies/{emergencyId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}