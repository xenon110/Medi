/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization by strictly controlling data access based on user roles and ownership.
 * The design favors simplicity and performance by denormalizing authorization data onto the documents themselves, avoiding costly `get()` operations within the rules.
 *
 * Data Structure:
 * - `/patients/{patientId}`: Stores patient profiles, accessible only by the owning patient.
 * - `/doctors/{doctorId}`: Stores doctor profiles, publicly readable.
 * - `/reports/{reportId}`: Stores medical reports, accessible based on patient/doctor relationships.
 * - `/emergencies/{emergencyId}`: Logs emergency events, writeable by any authenticated user.
 *
 * Key Security Decisions:
 * - Doctor listing is public to all authenticated users.
 * - Patient data is strictly private to each patient.
 * - Report access is controlled based on the `patientId` and `doctorId` fields within the report.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any authenticated user to read doctor profiles.
     * @path /doctors/{doctorId}
     * @allow (get, list) - Any signed-in user can read a doctor's profile.
     * @deny (create, update, delete) - No one can create, update, or delete a doctor's profile through client-side rules. Doctor profiles are managed via backend processes.
     * @principle Public read access for doctors.
     */
    match /doctors/{doctorId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a patient to read and write their own profile data.
     * @path /patients/{patientId}
     * @allow (get, list, create, update, delete) - A patient can manage their own profile.
     * @deny (get, list, create, update, delete) - Another patient cannot access this profile.
     * @principle Enforces document ownership for patients.
     */
    match /patients/{patientId} {
      allow get: if isOwner(patientId);
      allow list: if isOwner(patientId);
      allow create: if isOwner(patientId);
      allow update: if isExistingOwner(patientId);
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Controls access to medical reports based on patient and doctor relationships.
     * @path /reports/{reportId}
     * @allow (get, list) - Patients and doctors can read reports where they are involved.
     * @deny (create, update, delete) - Only authorized backend functions can modify reports.
     * @principle Enforces access control based on report relationships.
     */
    match /reports/{reportId} {
        allow get, list: if (isSignedIn() && (resource.data.patientId == request.auth.uid || resource.data.doctorId == request.auth.uid));
        allow create, update, delete: if false;
    }

    /**
     * @description Allows any authenticated user to create an emergency record with their patient ID.
     * @path /emergencies/{emergencyId}
     * @allow (create) - Any signed-in user can trigger an emergency.
     * @deny (get, list, update, delete) - No direct reading, listing, updating, or deleting of emergency records.
     * @principle Allows authenticated users to create emergency records.
     */
    match /emergencies/{emergencyId} {
      allow get, list, update, delete: if false;
      allow create: if isSignedIn();
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {bool} True if the user is the owner, false otherwise.
     * @example isOwner('someUserId') == (request.auth.uid == 'someUserId')
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of an existing document.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}