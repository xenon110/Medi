/**
 * @file Firebase Security Rules for Firestore.
 *
 * @Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * Patients have full control over their profiles and reports. Doctors can read patient profiles and review reports.
 *
 * @Data Structure:
 * - /doctors/{doctorId}: Stores doctor profiles, secured by doctor ID.
 * - /patients/{patientId}: Stores patient profiles, secured by patient ID.
 * - /reports/{reportId}: Stores medical reports, accessible by both patients and assigned doctors.
 * - /emergencies/{emergencyId}: Stores emergency logs; creation allowed for any authenticated user.
 *
 * @Key Security Decisions:
 * - Doctors can only read a patient profile if they exist as a doctor.
 * - Patients can create reports, and doctors can update reports assigned to them.
 * - No listing of users is allowed to prevent data scraping. List queries on reports is not allowed.
 * - Data validation is minimal in this prototype to allow for rapid iteration. Only authorization-critical fields are validated.
 *
 * @Denormalization for Authorization:
 * The `reports` collection uses `patientId` and `doctorId` fields to directly enforce access control, avoiding the need for complex queries or additional reads.
 *
 * @Structural Segregation:
 * Private user data (profiles) and potentially public data (reports) are stored in separate collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows doctors to read their own profile and write to their own profile.
     * @path /doctors/{doctorId}
     * @allow (read) User with any auth state can read the doctor profile.
     * @allow (write) User with auth matching `doctorId` can update.
     * @deny (write) User with mismatched auth cannot update.
     * @principle Enforces document ownership for writes.
     */
    match /doctors/{doctorId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if isSignedIn() && request.auth.uid == doctorId;
      allow delete: if false;
    }

    /**
     * @description Allows patients to read and write their own profile. Doctors can also read patient profiles.
     * @path /patients/{patientId}
     * @allow (read) User with auth matching `patientId` or an existing doctor can read.
     * @allow (write) User with auth matching `patientId` can update.
     * @deny (write) User with mismatched auth cannot update.
     * @principle Enforces document ownership and doctor access.
     */
    match /patients/{patientId} {
      allow get: if isSignedIn() && (request.auth.uid == patientId || isDoctor());
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == patientId;
      allow update: if isSignedIn() && request.auth.uid == patientId;
      allow delete: if false;
    }

    /**
     * @description Allows patients to create reports, and both patients and assigned doctors to read and update them.
     * @path /reports/{reportId}
     * @allow (create) User with auth can create a report for themself.
     * @allow (read) User with auth matching `patientId` or `doctorId` can read.
     * @allow (update) User with auth matching `patientId` or `doctorId` can update.
     * @deny (write) User with mismatched `patientId` cannot create.
     * @principle Enforces document ownership and doctor access for reports.
     */
    match /reports/{reportId} {
      allow get: if isSignedIn() && (get(/databases/$(database)/documents/patients/$(resource.data.patientId)).data.uid == request.auth.uid || resource.data.doctorId == request.auth.uid);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.patientId == request.auth.uid;
      allow update: if isSignedIn() && (get(/databases/$(database)/documents/patients/$(resource.data.patientId)).data.uid == request.auth.uid || resource.data.doctorId == request.auth.uid);
      allow delete: if false;
    }

    /**
     * @description Allows any authenticated user to create an emergency log.
     * @path /emergencies/{emergencyId}
     * @allow (create) User with any auth state can create.
     * @deny (read) No read allowed.
     * @principle Allows open creation for emergencies.
     */
    match /emergencies/{emergencyId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isDoctor() {
    return exists(/databases/$(database)/documents/doctors/$(request.auth.uid));
  }
}