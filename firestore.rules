/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description This ruleset enforces a user-ownership model for patient and doctor profiles,
 *              allowing authenticated users to manage their own profiles.
 *              Medical reports are publicly readable but writable only by associated patients or doctors.
 *              Emergency logs can be created by any authenticated user.
 *
 * Data Structure:
 * - /patients/{patientId}: Patient profile information. `patientId` must match the authenticated user's UID.
 * - /doctors/{doctorId}: Doctor profile information. `doctorId` must match the authenticated user's UID.
 * - /reports/{reportId}: Medical reports, accessible to anyone for reading, but only creatable by patients
 *                         and updatable/deletable by associated patients or doctors. Includes `patientId` and `doctorId` fields.
 * - /emergencies/{emergencyId}: Emergency logs, creatable by any authenticated user.
 *
 * Key Security Decisions:
 * - Users cannot list all patients or doctors for privacy reasons.
 * - Read access to medical reports is public.
 * - Reports' writes are limited to associated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for patient profiles.
     * @path /patients/{patientId}
     * @allow (get, update, delete) Authenticated user with matching patientId.
     * @allow (create) Authenticated user with matching patientId, with document `uid` matching `patientId`.
     * @deny (get, update, delete) If the user is not authenticated.
     * @deny (create) If the user is not authenticated or the document `uid` does not match the path `patientId`.
     * @principle Enforces document ownership for writes; authenticated read access to owner.
     */
    match /patients/{patientId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the patient document.
      function isOwner(patientId) {
        return request.auth.uid == patientId;
      }

      // Helper function to check if the user is an existing owner of the document.
      function isExistingOwner(patientId) {
        return isOwner(patientId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(patientId);
      allow list: if false; // Do not allow listing of users.
      allow create: if isSignedIn() && isOwner(patientId) && request.resource.data.uid == patientId;
      allow update: if isExistingOwner(patientId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Rules for doctor profiles.
     * @path /doctors/{doctorId}
     * @allow (get, update, delete) Authenticated user with matching doctorId.
     * @allow (create) Authenticated user with matching doctorId, with document `uid` matching `doctorId`.
     * @deny (get, update, delete) If the user is not authenticated.
     * @deny (create) If the user is not authenticated or the document `uid` does not match the path `doctorId`.
     * @principle Enforces document ownership for writes; authenticated read access to owner.
     */
    match /doctors/{doctorId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the doctor document.
      function isOwner(doctorId) {
        return request.auth.uid == doctorId;
      }

      // Helper function to check if the user is an existing owner of the document.
      function isExistingOwner(doctorId) {
        return isOwner(doctorId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(doctorId);
      allow list: if false; // Do not allow listing of users.
      allow create: if isSignedIn() && isOwner(doctorId) && request.resource.data.uid == doctorId;
      allow update: if isExistingOwner(doctorId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(doctorId);
    }

    /**
     * @description Rules for medical reports.
     * @path /reports/{reportId}
     * @allow (get, list) Anyone can read reports.
     * @allow (create) Authenticated user, where `patientId` in the request data matches `request.auth.uid`.
     * @allow (update, delete) Authenticated user, where `patientId` or `doctorId` in the resource data matches `request.auth.uid`.
     * @deny (create) If the user is not authenticated or `patientId` does not match `request.auth.uid`.
     * @deny (update, delete) If the user is not authenticated, or neither `patientId` nor `doctorId` in the resource data matches `request.auth.uid`, and the resource doesn't exist.
     * @principle Allows public read access but restricts writes to associated patients and doctors.
     */
    match /reports/{reportId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the patient or doctor associated with the report
      function isAssociated(patientId, doctorId) {
        return request.auth.uid == patientId || request.auth.uid == doctorId;
      }

      // Helper function to check if the user is an existing owner of the document.
      function isExistingAssociated(patientId, doctorId) {
        return isAssociated(patientId, doctorId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.patientId == request.auth.uid;
      allow update: if isExistingAssociated(resource.data.patientId, resource.data.doctorId);
      allow delete: if isExistingAssociated(resource.data.patientId, resource.data.doctorId);
    }

    /**
     * @description Rules for emergency logs.
     * @path /emergencies/{emergencyId}
     * @allow (create) Authenticated user can create logs.
     * @deny (get, list, update, delete) All other operations are denied.
     * @principle Only authenticated users can log emergencies.
     */
    match /emergencies/{emergencyId} {
       // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}