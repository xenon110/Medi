/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a user-ownership model for profiles,
 *  where users can only read and write their own profile data. Medical reports
 *  have shared access between patients and doctors. Emergency logs are only writable by patients.
 * @data-structure
 *  - /patients/{patientId}: Patient profiles, owned by the patient.
 *  - /doctors/{doctorId}: Doctor profiles, owned by the doctor.
 *  - /reports/{reportId}: Medical reports, shared between a patient and a doctor,
 *      with patientId and doctorId fields indicating the involved parties.
 *  - /emergencies/{emergencyId}: Emergency logs, recording emergency button clicks, owned by the patient.
 * @key-security-decisions
 *  - Users cannot list all patients or doctors. Listing is disabled.
 *  - Report writes are restricted to either the patient or doctor involved.
 *  - Schema validation is relaxed in prototyping mode to allow rapid iteration.
 * @denormalization-for-authorization
 *  - Reports include both patientId and doctorId fields to avoid needing additional queries
 *    for authorization.
 * @structural-segregation
 *  - Separate collections are used for patients and doctors to simplify access control
 *    based on user roles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to patient profiles.
     * @path /patients/{patientId}
     * @allow (create) User with UID 'patient_abc' can create a profile at /patients/patient_abc.
     * @allow (get) User with UID 'patient_abc' can read their own profile at /patients/patient_abc.
     * @deny (update) User with UID 'doctor_xyz' cannot update a profile at /patients/patient_abc.
     * @principle Enforces document ownership for writes and reads.
     */
    match /patients/{patientId} {
      // Users can only read/write their own patient profile.
      allow get: if isOwner(patientId);
      allow list: if false;
      allow create: if isOwner(patientId);
      allow update: if isExistingOwner(patientId);
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Controls access to doctor profiles.
     * @path /doctors/{doctorId}
     * @allow (create) User with UID 'doctor_xyz' can create a profile at /doctors/doctor_xyz.
     * @allow (get) User with UID 'doctor_xyz' can read their own profile at /doctors/doctor_xyz.
     * @deny (update) User with UID 'patient_abc' cannot update a profile at /doctors/doctor_xyz.
     * @principle Enforces document ownership for writes and reads.
     */
    match /doctors/{doctorId} {
      // Users can only read/write their own doctor profile.
      allow get: if isOwner(doctorId);
      allow list: if false;
      allow create: if isOwner(doctorId);
      allow update: if isExistingOwner(doctorId);
      allow delete: if isExistingOwner(doctorId);
    }

    /**
     * @description Controls access to medical reports.
     * @path /reports/{reportId}
     * @allow (create) User with UID 'patient_abc' can create a report if request.resource.data.patientId == 'patient_abc'.
     * @allow (get) User with UID 'patient_abc' can read a report where resource.data.patientId == 'patient_abc'.
     * @allow (update) User with UID 'doctor_xyz' can update a report where resource.data.doctorId == 'doctor_xyz'.
     * @deny (update) User with UID 'hacker' cannot update a report where they are not the patient or doctor.
     * @principle Enforces shared access between patient and doctor for medical reports.
     */
    match /reports/{reportId} {
      // Reports can be read by either the patient or the doctor involved.
      allow get: if isSignedIn() && (resource.data.patientId == request.auth.uid || resource.data.doctorId == request.auth.uid);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.patientId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && (resource.data.patientId == request.auth.uid || resource.data.doctorId == request.auth.uid);
      allow delete: if false; // Reports should not be deleted by clients
    }

     /**
      * @description Logs emergency button clicks.
      * @path /emergencies/{emergencyId}
      * @allow (create) User with UID 'patient_abc' can create an emergency log with patientId: 'patient_abc'.
      * @deny (get) No one is allowed to read an emergency log.
      * @principle Restricts access to creation by the authenticated user.
      */
      match /emergencies/{emergencyId} {
        allow get: if false;
        allow list: if false;
        allow create: if isSignedIn() && request.resource.data.patientId == request.auth.uid;
        allow update: if false;
        allow delete: if false;
      }
  }

  // Helper function to determine if the request is from the document owner.
  function isOwner(userId) {
    return request.auth != null && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}