rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to doctor profiles.
     * @path /doctors/{doctorId}
     * @allow (get, list) Authenticated users can read doctor profiles.
     * @allow (create, update, delete) Doctors can only write to their own profile.
     * @deny (create, update, delete) Doctors cannot edit other doctor profiles.
     * @principle Enforces doctor-ownership for profile writes.
     */
    match /doctors/{doctorId} {
      allow get: if isSignedIn();
      allow list: if false; // Do not allow listing of all doctors.
      allow create: if isSignedIn() && request.auth.uid == doctorId;
      allow update: if isSignedIn() && request.auth.uid == doctorId;
      allow delete: if false;
    }

    /**
     * @description Controls access to patient profiles.
     * @path /patients/{patientId}
     * @allow (get) Doctors and the patient can read the patient's profile.
     * @allow (create, update) Patients can only write to their own profile.
     * @deny (create, update) Patients cannot edit other patient profiles.
     * @principle Enforces patient-ownership for profile writes, allows doctor read access.
     */
    match /patients/{patientId} {
      allow get: if isSignedIn() && (request.auth.uid == patientId || isDoctor());
      allow list: if false; // Do not allow listing of all patients.
      allow create: if isSignedIn() && request.auth.uid == patientId;
      allow update: if isSignedIn() && request.auth.uid == patientId;
      allow delete: if false;
    }

    /**
     * @description Controls access to medical reports.
     * @path /reports/{reportId}
     * @allow (create) Patients can create reports for themselves.
     * @allow (get, update) Patients and assigned doctors can read/update reports.
     * @deny (delete) No one can delete reports.
     * @principle Enforces patient and doctor access to reports based on document fields.
     */
    match /reports/{reportId} {
      allow get: if isSignedIn() && (resource.data.patientId == request.auth.uid || resource.data.doctorId == request.auth.uid);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.patientId == request.auth.uid;
      allow update: if isSignedIn() && (resource.data.patientId == request.auth.uid || resource.data.doctorId == request.auth.uid);
      allow delete: if false;
    }

    /**
     * @description Controls access to emergency records.
     * @path /emergencies/{emergencyId}
     * @allow (create) Authenticated users can create emergency records.
     * @deny (get, list, update, delete) No other operations are allowed.
     * @principle Allows only creation of emergency records by authenticated users.
     */
    match /emergencies/{emergencyId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isDoctor() {
    return exists(/databases/$(database)/documents/doctors/$(request.auth.uid));
  }
}