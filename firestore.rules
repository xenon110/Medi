/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles,
 *  allowing only the authenticated user to read and write their own profile data.
 *  Medical reports are accessible to both the patient and the assigned doctor.
 *  Emergency logs are publicly accessible for reading but only the server can write to it.
 * @data_structure
 *  - /patients/{patientId}: Stores patient profiles, where patientId is the user's UID.
 *  - /doctors/{doctorId}: Stores doctor profiles, where doctorId is the user's UID.
 *  - /reports/{reportId}: Stores medical reports, with patientId and doctorId fields indicating access.
 *  - /emergencies/{emergencyId}: Stores logs of emergency button clicks, write is only allowed from the server.
 * @key_security_decisions
 *  - User listing is explicitly denied to prevent unauthorized data access.
 *  - Doctor verification status is not directly modifiable through client-side rules. A backend function should handle this.
 *  - Emergency logs are writeable by the server only to reliably record user-initiated events.
 * @denormalization_for_authorization
 *  - Reports contain both patientId and doctorId to allow for simple authorization checks without additional reads.
 * @structural_segregation
 *  - Separate collections for patients and doctors ensure clear role-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to patient profiles. Only the patient can read and write their own profile.
     * @path /patients/{patientId}
     * @allow (create, update, get) User with UID 'patient_abc' can create/update/get the document /patients/patient_abc.
     * @deny (create, update, get) User with UID 'other_user' cannot create/update/get the document /patients/patient_abc.
     * @deny list: Listing all patient profiles is not allowed.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /patients/{patientId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(patientId);
      allow list: if false;
      allow create: if isOwner(patientId) && request.resource.data.uid == patientId;
      allow update: if isExistingOwner(patientId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Controls access to doctor profiles. Only the doctor can read and write their own profile.
     * @path /doctors/{doctorId}
     * @allow (create, update, get) User with UID 'doctor_xyz' can create/update/get the document /doctors/doctor_xyz.
     * @deny (create, update, get) User with UID 'other_user' cannot create/update/get the document /doctors/doctor_xyz.
     * @deny list: Listing all doctor profiles is not allowed.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /doctors/{doctorId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(doctorId);
      allow list: if false;
      allow create: if isOwner(doctorId) && request.resource.data.uid == doctorId;
      allow update: if isExistingOwner(doctorId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(doctorId);
    }

    /**
     * @description Controls access to medical reports. Patients and assigned doctors can read reports. Only the doctor can modify reports.
     * @path /reports/{reportId}
     * @allow (get, list) Patient 'patient_abc' or Doctor 'doctor_xyz' can read a report where patientId is 'patient_abc' and doctorId is 'doctor_xyz'.
     * @allow (update) Doctor 'doctor_xyz' can update a report where doctorId is 'doctor_xyz'.
     * @deny (create, delete) Only a backend service should create or delete reports.
     * @deny (update) Patient 'patient_abc' cannot update a report, even if they are the patient listed in the report.
     * @principle Grants read access to both patient and doctor, write access to the doctor only.
     */
    match /reports/{reportId} {
      function isPatientOrDoctor(patientId, doctorId) {
        return request.auth != null && (request.auth.uid == patientId || request.auth.uid == doctorId);
      }

      function isDoctor(doctorId) {
        return request.auth != null && request.auth.uid == doctorId;
      }

      function isExistingDoctor(doctorId) {
        return isDoctor(doctorId) && resource != null;
      }

      allow get: if isPatientOrDoctor(resource.data.patientId, resource.data.doctorId);
      allow list: if true;
      allow create: if false;
      allow update: if isExistingDoctor(resource.data.doctorId);
      allow delete: if false;
    }

    /**
     * @description Controls access to emergency logs.  Write access is restricted to the server. All users can read logs.
     * @path /emergencies/{emergencyId}
     * @allow get, list: Any user can read emergency logs.
     * @deny create, update, delete: Only the server can write emergency logs.
     * @principle Allows public read access with server-only writes for critical events.
     */
    match /emergencies/{emergencyId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}