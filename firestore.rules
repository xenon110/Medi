/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a role-based access control model,
 * with user-specific ownership for profiles and shared access between doctors and patients for reports.
 * Doctors are granted read access to patient profiles for verification purposes.
 * @data_structure User profiles are stored in `/patients/{patientId}` and `/doctors/{doctorId}`.
 * Medical reports, shared between patients and doctors, are stored in `/reports/{reportId}`.
 * Emergency logs are stored in `/emergencies/{emergencyId}`.
 * @key_security_decisions User listing is disallowed to prevent unauthorized data access.
 * Report access is controlled based on patient and doctor IDs within the document.
 * Emergency logs can be created by anyone, reflecting the nature of an emergency event,
 * but cannot be read.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for patient profiles.
     * @path /patients/{patientId}
     * @allow (create) Authenticated user can create their own profile if the `patientId` matches their `uid`.
     * @allow (get, list, update, delete) Authenticated user can access their own profile if the `patientId` matches their `uid`.
     * @deny (create, update, delete) Unauthenticated users cannot create, update, or delete any patient profile.
     * @deny (get, list) Unauthenticated users cannot read/list any patient profile.
     * @principle Enforces document ownership for profile management.
     */
    match /patients/{patientId} {
      function isOwner(patientId) {
        return request.auth != null && request.auth.uid == patientId;
      }
      allow get: if isOwner(patientId);
      allow list: if isOwner(patientId);
      allow create: if isOwner(patientId) ;
      allow update: if isOwner(patientId);
      allow delete: if isOwner(patientId);
    }

    /**
     * @description Enforces access control for doctor profiles.
     * @path /doctors/{doctorId}
     * @allow (create) Authenticated user can create their own profile if the `doctorId` matches their `uid`.
     * @allow (get, list, update, delete) Authenticated user can access their own profile if the `doctorId` matches their `uid`.
     * @deny (create, update, delete) Unauthenticated users cannot create, update, or delete any doctor profile.
     * @deny (get, list) Unauthenticated users cannot read/list any doctor profile.
     * @principle Enforces document ownership for profile management.
     */
    match /doctors/{doctorId} {
      function isOwner(doctorId) {
        return request.auth != null && request.auth.uid == doctorId;
      }
      allow get: if isOwner(doctorId);
      allow list: if isOwner(doctorId);
      allow create: if isOwner(doctorId);
      allow update: if isOwner(doctorId);
      allow delete: if isOwner(doctorId);
    }

    /**
     * @description Enforces access control for medical reports, allowing shared access between patients and doctors.
     * @path /reports/{reportId}
     * @allow (get, list) Any authenticated user can read any report.
     * @allow (create) Authenticated user can create a report. They must be the patient or doctor associated with the report.
     * @allow (update) Authenticated user can update a report if they are the patient or doctor associated with the report and the report exists.
     * @allow (delete) Authenticated user can delete a report if they are the patient or doctor associated with the report and the report exists.
     * @deny (create, update, delete) Unauthenticated users cannot create, update, or delete reports.
     * @principle Enforces shared access based on patientId and doctorId within the report.
     */
    match /reports/{reportId} {
      function isPatient(report) {
        return request.auth != null && request.auth.uid == report.patientId;
      }
      function isDoctor(report) {
        return request.auth != null && request.auth.uid == report.doctorId;
      }
      function isValidReportCreation() {
        return request.resource.data.keys().hasAll(['patientId', 'doctorId', 'reportName', 'status', 'createdAt', 'aiReport'])
               && (isPatient(request.resource.data) || isDoctor(request.resource.data));
      }
       function isExistingPatient(reportId) {
         return get(/databases/$(database)/documents/reports/$(reportId)).data.patientId == request.auth.uid && resource != null;
       }
        function isExistingDoctor(reportId) {
          return get(/databases/$(database)/documents/reports/$(reportId)).data.doctorId == request.auth.uid && resource != null;
        }
      allow get, list: if true;
      allow create: if isValidReportCreation();
      allow update: if isExistingPatient(reportId) || isExistingDoctor(reportId);
      allow delete: if isExistingPatient(reportId) || isExistingDoctor(reportId);
    }

     /**
      * @description Allows anyone to create emergency logs but restricts reads.
      * @path /emergencies/{emergencyId}
      * @allow (create) Any authenticated user can create an emergency log.
      * @deny (get, list, update, delete) No one can read, update, or delete emergency logs.
      * @principle Logs emergency events but prevents data access.
      */
     match /emergencies/{emergencyId} {
       allow create: if request.auth != null;
       allow get: if false;
       allow list: if false;
       allow update: if false;
       allow delete: if false;
     }
  }
}